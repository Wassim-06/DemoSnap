// components/dashboard/new-demo-modal.tsx
"use client"

import { useState, useRef, useEffect } from "react";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { UploadCloud, FileJson, X } from "lucide-react";
import { createDemoAction } from "@/app/actions/demo-actions";
import { createClient } from "@/lib/supabase-client";

interface Workspace { id: string; name: string }

type NewDemoModalProps = {
    isOpen: boolean;
    onOpenChange: (isOpen: boolean) => void;
};

export default function NewDemoModal({ isOpen, onOpenChange }: NewDemoModalProps) {
    const [file, setFile] = useState<File | null>(null);
    const [isPending, setIsPending] = useState(false);
    const [workspaces, setWorkspaces] = useState<Workspace[]>([]);
    const [selectedWs, setSelectedWs] = useState<string>("");
    const fileInputRef = useRef<HTMLInputElement>(null);
    const supabase = createClient();

    // Fetch user workspaces on mount
    useEffect(() => {
        (async () => {
            const { data } = await supabase
                .from("workspaces")
                .select("id, name");
            if (data) {
                setWorkspaces(data as Workspace[]);
                setSelectedWs(data[0]?.id || "");
            }
        })();
    }, []);

    const handleFileChange = (files: FileList | null) => {
        if (files && files[0] && files[0].name.endsWith('.demosnap.json')) {
            setFile(files[0]);
        } else {
            setFile(null);
            alert("Veuillez sélectionner un fichier .demosnap.json");
        }
    };

    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!file || !selectedWs) return;

        setIsPending(true);
        const formData = new FormData();
        formData.append("file", file);
        formData.append("name", file.name.replace('.demosnap.json', ''));
        formData.append("workspaceId", selectedWs);

        const result = await createDemoAction(formData);

        if (result.error) {
            alert("Erreur lors de la création : " + result.error);
        } else {
            alert("Démo créée avec succès !");
            onOpenChange(false);
            setFile(null);
        }
        setIsPending(false);
    };

    return (
        <Dialog open={isOpen} onOpenChange={(open) => { if (!isPending) onOpenChange(open); }}>
            <DialogContent className="sm:max-w-[480px]">
                <form onSubmit={handleSubmit}>
                    <DialogHeader>
                        <DialogTitle>Create a new demo</DialogTitle>
                        <DialogDescription>
                            Upload the recording file generated by the DemoSnap Chrome extension.
                        </DialogDescription>
                    </DialogHeader>

                    {/* Workspace selector */}
                    <div className="mb-4">
                        <label htmlFor="workspaceId" className="block mb-1 font-medium">Workspace</label>
                        <select
                            id="workspaceId"
                            name="workspaceId"
                            className="w-full border p-2 rounded"
                            value={selectedWs}
                            onChange={(e) => setSelectedWs(e.target.value)}
                            disabled={isPending}
                        >
                            {workspaces.map(ws => (
                                <option key={ws.id} value={ws.id}>{ws.name}</option>
                            ))}
                        </select>
                    </div>

                    {!file ? (
                        <div className="py-6">
                            <div
                                onClick={() => fileInputRef.current?.click()}
                                className="flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded cursor-pointer"
                            >
                                <UploadCloud className="h-10 w-10 text-slate-400 mb-3" />
                                <p className="text-slate-700 font-semibold">Drag & drop ou cliquez pour sélectionner</p>
                                <input
                                    ref={fileInputRef}
                                    type="file"
                                    className="hidden"
                                    accept=".demosnap.json"
                                    onChange={(e) => handleFileChange(e.target.files)}
                                />
                            </div>
                        </div>
                    ) : (
                        <div className="py-6">
                            <div className="flex items-center justify-between p-4 border rounded-md bg-slate-50">
                                <div className="flex items-center gap-3">
                                    <FileJson className="h-6 w-6 text-emerald-500" />
                                    <span className="text-sm font-medium text-slate-700">{file.name}</span>
                                </div>
                                <Button variant="ghost" size="icon" onClick={() => setFile(null)}>
                                    <X className="h-4 w-4" />
                                </Button>
                            </div>
                        </div>
                    )}

                    <DialogFooter>
                        <Button variant="ghost" type="button" onClick={() => onOpenChange(false)} disabled={isPending}>Cancel</Button>
                        <Button type="submit" disabled={!file || isPending} className="bg-emerald-500">
                            {isPending ? "Création..." : "Create Demo"}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
}